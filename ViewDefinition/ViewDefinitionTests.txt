/*---------------------------------------------------------------------------------**//**
 * @bsimethod
 +---------------+---------------+---------------+---------------+---------------+------*/
TEST_F(ViewDefinitionTests, ViewDefinition2dCRUD)
    {
    SetupSeedProject();
    DgnViewId DviewDefid, SviewDefid,RviewDefid;
    if (true)
        {
        DefinitionModelR dictionary = m_db->GetDictionaryModel();
        DocumentListModelPtr DocListModel = DgnDbTestUtils::InsertDocumentListModel(*m_db, "DrawingListModel");
        DrawingPtr drawing = DgnDbTestUtils::InsertDrawing(*DocListModel, "TestDrawingModel");
        DrawingModelPtr drawingModel = DgnDbTestUtils::InsertDrawingModel(*drawing);

        CategorySelectorPtr categories = new CategorySelector(dictionary, "");
        for (ElementIteratorEntryCR categoryEntry : DrawingCategory::MakeIterator(*m_db))
            categories->AddCategory(categoryEntry.GetId<DgnCategoryId>());

        DisplayStyle2dPtr style = new DisplayStyle2d(dictionary, "");
        ASSERT_TRUE(style.IsValid());
        Render::ViewFlags flags = style->GetViewFlags();
        flags.SetRenderMode(Render::RenderMode::SmoothShade);
        style->SetViewFlags(flags);
        //Create a  DrawingView
        DrawingViewDefinitionPtr viewDef = new DrawingViewDefinition(dictionary, "DrawingView", drawingModel->GetModelId(), *categories, *style);
        ASSERT_TRUE(viewDef.IsValid());
        ASSERT_EQ(viewDef->GetName(), "DrawingView");
        viewDef->SetDescription("DrawingView Descr");
        ASSERT_EQ(viewDef->GetDescription(), "DrawingView Descr");
        ASSERT_TRUE(viewDef->IsDrawingView());
        viewDef->SetIsPrivate(false);
        ASSERT_FALSE(viewDef->IsPrivate());
        //Insert DrawingView
        ViewDefinitionCPtr viewDefele = viewDef->Insert();
        ASSERT_TRUE(viewDefele.IsValid());
        DviewDefid = viewDefele->GetViewId();
        ASSERT_TRUE(DviewDefid == ViewDefinition::QueryViewId(dictionary, "DrawingView"));
        //Create SheetView
        Sheet::ElementPtr sheet = DgnDbTestUtils::InsertSheet(*DocListModel, 1.0, 1.0, 1.0, "MySheet");
        Sheet::ModelPtr sheetModel = DgnDbTestUtils::InsertSheetModel(*sheet);
        SheetViewDefinitionPtr sheetView=new SheetViewDefinition(dictionary, "MySheetView", sheetModel->GetModelId(), *categories, *style);
        ASSERT_TRUE(sheetView.IsValid());
        ASSERT_EQ(sheetView->GetName(), "MySheetView");
        sheetView->SetDescription("SheetView Descr");
        ASSERT_EQ(sheetView->GetDescription(), "SheetView Descr");
        ASSERT_TRUE(sheetView->IsSheetView());
        sheetView->SetIsPrivate(false);
        ASSERT_FALSE(sheetView->IsPrivate());
        //Insert SheetView
        ViewDefinitionCPtr sheetviewele=sheetView->Insert();
        SviewDefid = sheetviewele->GetViewId();
        ASSERT_TRUE(SviewDefid == ViewDefinition::QueryViewId(dictionary, "MySheetView"));
        }
    BeFileName fileName = m_db->GetFileName();
    m_db->SaveChanges();
    m_db->CloseDb();
    m_db = nullptr;
    //Check what stored in Db and then Update DrawingViewDefinition
    OpenDb(m_db, fileName, Db::OpenMode::ReadWrite, true);
    {
    //DrawingViewDefinition
    DrawingViewDefinitionPtr viewDef = m_db->Elements().GetForEdit<DrawingViewDefinition>(DviewDefid);
    ASSERT_TRUE(viewDef.IsValid());
    DisplayStyleR style = viewDef->GetDisplayStyle();
    ASSERT_EQ(style.GetViewFlags().GetRenderMode(), Render::RenderMode::SmoothShade);
    Render::ViewFlags flags = style.GetViewFlags();
    flags.SetRenderMode(Render::RenderMode::SolidFill);
    style.SetViewFlags(flags);
    ASSERT_EQ(style.GetViewFlags().GetRenderMode(), Render::RenderMode::SolidFill);
    style.SetBackgroundColor(ColorDef::Red());
    ASSERT_EQ(style.GetBackgroundColor(), ColorDef::Red());
    ASSERT_EQ(viewDef->GetDescription(), "DrawingView Descr");
    viewDef->SetDescription("Descr");
    ASSERT_EQ(viewDef->GetDescription(), "Descr");
    EXPECT_EQ(DgnDbStatus::Success, viewDef->Update());
    EXPECT_EQ(DgnDbStatus::Success, style.Update());
    //SheetViewDefinition
    SheetViewDefinitionPtr SviewDef = m_db->Elements().GetForEdit<SheetViewDefinition>(SviewDefid);
    ASSERT_TRUE(SviewDef.IsValid());
    DisplayStyleR Sstyle = SviewDef->GetDisplayStyle();
    ASSERT_EQ(Sstyle.GetViewFlags().GetRenderMode(), Render::RenderMode::SolidFill);
    ASSERT_EQ(Sstyle.GetBackgroundColor(), ColorDef::Red());
    ASSERT_EQ(SviewDef->GetDescription(), "SheetView Descr");
    SviewDef->SetDescription("Descr");
    ASSERT_EQ(SviewDef->GetDescription(), "Descr");
    EXPECT_EQ(DgnDbStatus::Success, SviewDef->Update());
    }
    m_db->SaveChanges();
    m_db->CloseDb();
    m_db = nullptr;
    //Check update values are saved in Db
    OpenDb(m_db, fileName, Db::OpenMode::ReadWrite, true);
    // DrawingViewDefinition
    DrawingViewDefinitionPtr viewDef = m_db->Elements().GetForEdit<DrawingViewDefinition>(DviewDefid);
    ASSERT_TRUE(viewDef.IsValid());
    DisplayStyleR style = viewDef->GetDisplayStyle();
    ASSERT_EQ(style.GetViewFlags().GetRenderMode(), Render::RenderMode::SolidFill);
    ASSERT_EQ(style.GetBackgroundColor(), ColorDef::Red());
    ASSERT_EQ(viewDef->GetDescription(), "Descr");
    // SheetViewDefinition
    SheetViewDefinitionPtr SviewDef = m_db->Elements().GetForEdit<SheetViewDefinition>(SviewDefid);
    ASSERT_TRUE(SviewDef.IsValid());
    ASSERT_EQ(SviewDef->GetDescription(), "Descr");
    EXPECT_EQ(DgnDbStatus::Success, SviewDef->Update());

    // Delete the Views
    ASSERT_NE(DgnDbStatus::Success, viewDef->Delete()); // ViewDefinitions can only be deleted via "purge"
    ASSERT_NE(DgnDbStatus::Success, SviewDef->Delete()); // ViewDefinitions can only be deleted via "purge"
    DgnDb::PurgeOperation purgeOperation(*m_db); // Give test permission to delete ViewDefinition (normally reserved for "purge" operations)
    ASSERT_EQ(DgnDbStatus::Success, viewDef->Delete());
    ASSERT_EQ(DgnDbStatus::Success, SviewDef->Delete());
    ASSERT_EQ(0, ViewDefinition::QueryCount(*m_db));
    m_db->SaveChanges();
    }