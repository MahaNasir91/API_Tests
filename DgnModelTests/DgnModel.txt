//---------------------------------------------------------------------------------------
// @bsimethod
//---------------------------------------------------------------------------------------
TEST_F(DgnModelTests, SheetModelCRUD)
    {
    SetupSeedProject();

    DgnModelId sheetModelId1, sheetModelId2;

    BeFileName dbFileName;

    if (true)
        {
        DgnDbPtr db = m_db;
        ASSERT_EQ(0, countSheetModels(*db));

        double scale1 = 1.0;
        double height1 = 1.5;
        double width1 = 1.1;

        double scale2 = 2.0;
        double height2 = 2.5;
        double width2 = 2.2;

        // Create a sheet
        DgnDbTestUtils::InsertDrawingCategory(*db, "TestDrawingCategory");
        DocumentListModelPtr sheetListModel = DgnDbTestUtils::InsertDocumentListModel(*db, "SheetListModel");
        Sheet::ElementPtr sheet1 = DgnDbTestUtils::InsertSheet(*sheetListModel, scale1, height1, width1, "Sheet1");
        Sheet::ModelPtr sheetModel1 = DgnDbTestUtils::InsertSheetModel(*sheet1);
        sheetModelId1 = sheetModel1->GetModelId();

        ASSERT_EQ(1, countSheetModels(*db));
        ASSERT_NE(DgnDbStatus::Success, sheetModel1->Insert()) << "Should be illegal to INSERT a SheetModel that is already persistent";

        // Create a second sheet
        Sheet::ElementPtr sheet2 = DgnDbTestUtils::InsertSheet(*sheetListModel, scale2, height2, width2, "Sheet2");
        Sheet::ModelPtr sheetModel2 = DgnDbTestUtils::InsertSheetModel(*sheet2);
        sheetModelId2 = sheetModel2->GetModelId();

        ASSERT_EQ(2, countSheetModels(*db));

        ASSERT_EQ(scale1, sheet1->GetScale());
        ASSERT_EQ(scale2, sheet2->GetScale());
        ASSERT_EQ(height1, sheet1->GetHeight());
        ASSERT_EQ(height2, sheet2->GetHeight());
        ASSERT_EQ(width1, sheet1->GetWidth());
        ASSERT_EQ(width2, sheet2->GetWidth());
        DgnCode Code1 = Sheet::Element::CreateCode(*sheetListModel, "Sheet1");
        ASSERT_EQ(Code1,sheet1->GetCode());
        DgnCode Code2 = Sheet::Element::CreateCode(*sheetListModel, "Sheet2");
        ASSERT_EQ(Code2, sheet2->GetCode());

        //Set Sheet properies
        sheet1->SetScale(2);
        ASSERT_EQ(2, sheet1->GetScale());
        sheet1->SetHeight(4);
        ASSERT_EQ(4, sheet1->GetHeight());
        sheet1->SetWidth(3.5);
        ASSERT_EQ(3.5, sheet1->GetWidth());
        sheet2->SetScale(2.5);
        ASSERT_EQ(2.5, sheet2->GetScale());
        sheet2->SetHeight(4);
        ASSERT_EQ(4, sheet2->GetHeight());
        sheet2->SetWidth(3);
        ASSERT_EQ(3, sheet2->GetWidth());

        ASSERT_EQ(DgnDbStatus::Success, sheet1->Update());
        ASSERT_EQ(DgnDbStatus::Success, sheet2->Update());

        sheet1 = nullptr;
        sheet2 = nullptr;
        dbFileName = db->GetFileName();
        db->SaveChanges();
        db->CloseDb();
        }

    // Verify that loading works
    if (true)
        {
        DgnDbPtr db = DgnDb::OpenIModelDb(nullptr, dbFileName, DgnDb::OpenParams(Db::OpenMode::ReadWrite));
        ASSERT_TRUE(db.IsValid());

        Sheet::ModelPtr sheetModel1 = db->Models().Get<Sheet::Model>(sheetModelId1);
        ASSERT_TRUE(sheetModel1.IsValid());

        Sheet::ElementCPtr sheet1 = db->Elements().Get<Sheet::Element>(sheetModel1->GetModeledElementId());
        ASSERT_TRUE(sheet1.IsValid());
        ASSERT_EQ(2, sheet1->GetScale());
        ASSERT_EQ(4, sheet1->GetHeight());
        ASSERT_EQ(3.5, sheet1->GetWidth());

        DgnModelPtr sheetModel2 = db->Models().GetModel(sheetModelId2);
        Sheet::ElementCPtr sheet2 = db->Elements().Get<Sheet::Element>(sheetModel2->GetModeledElementId());
        ASSERT_EQ(2.5, sheet2->GetScale());
        ASSERT_EQ(4, sheet2->GetHeight());
        ASSERT_EQ(3, sheet2->GetWidth());
        // Delete Sheet2
        ASSERT_EQ(2, countSheetModels(*db));
        ASSERT_EQ(DgnDbStatus::Success, sheetModel2->Delete());
        ASSERT_EQ(1, countSheetModels(*db));
        sheet1 = nullptr;
        sheet2 = nullptr;
        db->SaveChanges();
        db->CloseDb();
        }

    if (true)
        {
        m_db = DgnDb::OpenIModelDb(nullptr, dbFileName, DgnDb::OpenParams(Db::OpenMode::ReadWrite));
        ASSERT_TRUE(m_db.IsValid());
        ASSERT_EQ(1, countSheetModels(*m_db));

        // Verify that we can only place drawing elements in a sheet
        Placement3d placement(DPoint3d::From(2,2,0), YawPitchRollAngles(AngleInDegrees::FromDegrees(90), AngleInDegrees::FromDegrees(0), AngleInDegrees::FromDegrees(0)));
        Placement2d placement2d(DPoint2d::From(2,2), AngleInDegrees::FromDegrees(90));
        DPoint3d pt1 = DPoint3d::FromZero();
        DPoint3d pt2 = DPoint3d::From(1, 0, 0);

        EXPECT_TRUE(!InsertElement3d(sheetModelId1, placement, pt1, pt2).IsValid());
        EXPECT_TRUE(InsertElement2d(sheetModelId1, placement2d, pt1, pt2).IsValid());
        m_db->SaveChanges();
        m_db->CloseDb();
        }
    }

/*---------------------------------------------------------------------------------**//**
* @bsimethod
+---------------+---------------+---------------+---------------+---------------+------*/
TEST_F(DgnModelTests, ModelIterator)
    {
    SetupSeedProject();
    PhysicalModelPtr physicalModel1 = DgnDbTestUtils::InsertPhysicalModel(*m_db, "PhysicalModel1");
    PhysicalModelPtr physicalModel2 = DgnDbTestUtils::InsertPhysicalModel(*m_db, "PhysicalModel2");
    PhysicalModelPtr physicalModel3 = DgnDbTestUtils::InsertPhysicalModel(*m_db, "PhysicalModel3");
    DgnClassId physicalModelClassId = m_db->Schemas().GetClassId(BIS_ECSCHEMA_NAME, BIS_CLASS_PhysicalModel);

    ASSERT_TRUE(physicalModel1->IsSpatiallyLocated());
    ASSERT_FALSE(physicalModel1->IsNotSpatiallyLocated());
    ASSERT_FALSE(physicalModel1->IsPlanProjection());

    ASSERT_EQ(physicalModel1->ToPhysicalModel(), physicalModel1.get());
    ASSERT_EQ(physicalModel1->ToSpatialModel(), physicalModel1.get());
    ASSERT_EQ(physicalModel1->ToGeometricModel3d(), physicalModel1.get());
    ASSERT_EQ(physicalModel1->ToGeometricModel(), physicalModel1.get());
    ASSERT_EQ(physicalModel1->ToSpatialLocationModel(), nullptr);
    ASSERT_EQ(physicalModel1->ToGraphicalModel3d(), nullptr);

    SpatialLocationModelPtr spatialLocationModel1 = DgnDbTestUtils::InsertSpatialLocationModel(*m_db, "SpatialLocationModel1");
    SpatialLocationModelPtr spatialLocationModel2 = DgnDbTestUtils::InsertSpatialLocationModel(*m_db, "SpatialLocationModel2");

    ASSERT_TRUE(spatialLocationModel1->IsSpatiallyLocated());
    ASSERT_FALSE(spatialLocationModel1->IsNotSpatiallyLocated());
    ASSERT_FALSE(spatialLocationModel1->IsPlanProjection());

    ASSERT_EQ(spatialLocationModel1->ToSpatialLocationModel(), spatialLocationModel1.get());
    ASSERT_EQ(spatialLocationModel1->ToSpatialModel(), spatialLocationModel1.get());
    ASSERT_EQ(spatialLocationModel1->ToGeometricModel3d(), spatialLocationModel1.get());
    ASSERT_EQ(spatialLocationModel1->ToGeometricModel(), spatialLocationModel1.get());
    ASSERT_EQ(spatialLocationModel1->ToPhysicalModel(), nullptr);
    ASSERT_EQ(spatialLocationModel1->ToGraphicalModel3d(), nullptr);

    DocumentListModelPtr documentListModel1 = DgnDbTestUtils::InsertDocumentListModel(*m_db, "DocumentListModel1");

    ASSERT_EQ(documentListModel1->ToInformationModel(), documentListModel1.get());
    ASSERT_EQ(documentListModel1->ToGeometricModel(), nullptr);

    const int numPhysicalModels = 3 + 1; // 1 PhysicalModel created by SetupSeedProject
    const int numSpatialLocationModels = 2;
    const int numSpatialModels = numPhysicalModels + numSpatialLocationModels;
    const int numDocumentListModels = 1;

    ModelIterator iterator = m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_PhysicalModel));
    ASSERT_EQ(numPhysicalModels, iterator.BuildIdSet().size());
    ASSERT_EQ(numPhysicalModels, iterator.BuildIdList().size());

    bvector<DgnModelId> idList;
    iterator.BuildIdList(idList);
    ASSERT_EQ(numPhysicalModels, idList.size());

    int count = 0;
    for (ModelIteratorEntryCR entry : iterator)
        {
        ASSERT_EQ(physicalModelClassId, entry.GetClassId());
        ++count;
        }

    ASSERT_EQ(numPhysicalModels, count);
    ASSERT_EQ(numSpatialLocationModels, m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_SpatialLocationModel)).BuildIdSet().size());
    ASSERT_EQ(numSpatialModels, m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_SpatialModel)).BuildIdSet().size());
    ASSERT_EQ(numDocumentListModels, m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_DocumentListModel)).BuildIdSet().size());
    ASSERT_EQ(1, m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_DictionaryModel)).BuildIdSet().size());

    Utf8PrintfString whereClause("WHERE ECInstanceId=%" PRIu64, physicalModel1->GetModelId().GetValue());
    count = 0;
    for (ModelIteratorEntryCR entry : m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_PhysicalModel), whereClause.c_str()))
        {
        ASSERT_EQ(physicalModel1->GetModelId(), entry.GetModelId());
        ASSERT_EQ(physicalModel1->GetModeledElementId(), entry.GetModeledElementId());
        ASSERT_EQ(physicalModelClassId, entry.GetClassId());
        ASSERT_TRUE(!entry.IsPrivate());
        ASSERT_FALSE(entry.IsTemplate());
        ++count;
        }

    ASSERT_EQ(1, count);

    idList = m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_PhysicalModel), nullptr, "ORDER BY ECInstanceId ASC").BuildIdList();
    ASSERT_EQ(numPhysicalModels, idList.size());
    ASSERT_EQ(physicalModel1->GetModelId(), idList[1]);
    ASSERT_EQ(physicalModel2->GetModelId(), idList[2]);
    ASSERT_EQ(physicalModel3->GetModelId(), idList[3]);

    idList = m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_PhysicalModel), nullptr, "ORDER BY ECInstanceId DESC").BuildIdList();
    ASSERT_EQ(numPhysicalModels, idList.size());
    ASSERT_EQ(physicalModel1->GetModelId(), idList[2]);
    ASSERT_EQ(physicalModel2->GetModelId(), idList[1]);
    ASSERT_EQ(physicalModel3->GetModelId(), idList[0]);

    ASSERT_EQ(numSpatialModels, m_db->Models().MakeIterator(BIS_SCHEMA(BIS_CLASS_SpatialModel), "WHERE [IsTemplate]=false", "ORDER BY ECInstanceId").BuildIdSet().size());
    }